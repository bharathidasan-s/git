import { Injectable } from '@angular/core';

@Injectable()
export class XmsutilsService {
  foo = "orig";

  constructor() { }

  //_____________________________________________________________________________
  //==============================================================================
  //           com.ami.projects.XMS/XMSUtils::registerLanguageFile
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   elangobj: ELang -
  //
  // Output
  // ------
  //   void -
  //
  //______________________________________________________________________________
  //==============================================================================
  registerLanguageFile(elangobj: any): void {
    // lg = elangobj;
  }

  //______________________________________________________________________________
  //==============================================================================
  //          com.ami.projects.XMS/XMSUtils::createDeviceNameString
  //------------------------------------------------------------------------------
  // This is a common function used to create a useful device name, especially
  // inside things like grids.
  //
  // Input
  // -----
  //   did: String -  id of the device to find in the global table
  //   pluginID		- pluginID
  //
  // Output
  // ------
  //   String - displayname of the device, if present, or autogenerated name
  // 				if not.  If the device is not found in the local store, then
  //					"" is returned to allow the caller to check and handle it.
  //
  //______________________________________________________________________________
  //==============================================================================
  createDeviceNameString(did: string, pluginID: string, returnblankifmissing: Boolean = false): string {
    // var ret: String = (returnblankifmissing ? "" : XMSUtils.tokenizestrings(lg.$("STR_APP_NODEOBSOLETE"), did));
    var ret: string = ((returnblankifmissing) ? "" : "STR_APP_NODEOBSOLETE" + did);
		/* var node: XML = getPluginNodefromDevID(did, pluginID);
		if (node) {
			ret = createDeviceNameStringfromNode(node);
		} */
    return ret;
  }

  //______________________________________________________________________________
  //==============================================================================
  //      com.ami.projects.XMS/XMSUtils::createDeviceNameStringfromEPID
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   epid: String -
  //
  //   returnblankifmissing: Boolean=false -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================
  createDeviceNameStringfromEPID(epid: string, returnblankifmissing: Boolean = false): string {
    // var ret: String = (returnblankifmissing ? "" : XMSUtils.tokenizestrings(lg.$("STR_APP_NODEOBSOLETE"), epid));
    var ret: string = ((returnblankifmissing) ? "" : "STR_APP_NODEOBSOLETE" + epid);
		/* var node: XMLList = _gd.xmlcDeviceList.source..plugin.(@epid== epid);
		if (node.length() == 1) {
			ret = createDeviceNameStringfromNode(XML(node));
		} */
    return ret;
  }
  //______________________________________________________________________________
  //==============================================================================
  //      com.ami.projects.XMS/XMSUtils::createDeviceNameStringfromNode
  //------------------------------------------------------------------------------
  // MAIN DEVICE NAMING FUNCTION
  //
  // NOTE: the input to this function is a <plugin> node
  //
  // Input
  // -----
  //   node: XML -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================
  createDeviceNameStringfromNode(node: any): string {

    var typename: string = "_gd.pluginDeviceList[node.@id][node.@type].name";
    var enode: any = node.parent();
    var defaultname: string = this.getNameFromDisplayName(enode.displayName);
    defaultname = defaultname == "" ? "" : "\"" + defaultname + "\"";
    var devicedefaultname: string = node.displayName;	// plugin name
    var pluginip: string = node.ip ? node.ip : "";
    var dns: string = enode.ip;//.(text() == String(node.ip[0])).@dns;
    var dnsusersetting: string = this.getUserSetting("showdns");
    if (dnsusersetting == "0") {
      dns = "";
    }
    let offline: any = (/* Number(node.@status)& */ XMSConstants.GLOBAL_HEALTHSTAT_STATUSMASK) == XMSConstants.GLOBAL_HEALTHSTAT_NOTMANAGEABLE;
    var ret: String = "";

    if (devicedefaultname != "")	// Use plugin displayName first...
    {
      ret = typename + " " + defaultname + " " + "[" + devicedefaultname + (pluginip != "" ? " @ " + pluginip : "") + "]";
    }
    else if (node.ip)								// or use ip/dns
    {
      ret = typename + " " + defaultname + " " + "[" + node.ip + (dns != "" ? " - " + dns : "") + "]";
    }
    else if (defaultname != "")	// or parent entity name next, if present
    {
      ret = typename + " " + defaultname;
    }
    else {
      ret = typename;
    }
    return ret + (offline ? " (OFFLINE)" : "");

  }
  //______________________________________________________________________________
  //==============================================================================
  //          com.ami.projects.XMS/XMSUtils::createEntityNameString
  //------------------------------------------------------------------------------
  // Added 3.0, to create an entity name given an ENTITY (Device Group) id
  //
  // Input
  // -----
  //   did: String -
  //
  //   pluginID: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  createEntityNameString(eid: String): String {
    var devicenode: any = this.getEntityfromID(eid);
    if (devicenode == null) {
      return 'STR_APP_OBSOLETEORIGNORED_DEVICE';
      // return lg.getString('STR_APP_OBSOLETEORIGNORED_DEVICE');
    }
    else {
      return this.createEntityNameStringFromNode(devicenode);
    }
  }


  //______________________________________________________________________________
  //==============================================================================
  //      com.ami.projects.XMS/XMSUtils::createEntityNameStringFromNode
  //------------------------------------------------------------------------------
  // MAIN ENTITY NAMING FUNCTION
  //
  // Generic function to create the name of an entity/ device group
  //
  // Input
  // -----
  //   node: XML -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================
  createEntityNameStringFromNode(node: any, ignoreoffline: Boolean = false): string {
    if (node == null) {
      return 'STR_APP_OBSOLETEORIGNORED_DEVICE';
      // return lg.getString('STR_APP_OBSOLETEORIGNORED_DEVICE');
    }
    else {

      // Naming works like this:
      // 1) Entity displayName by itself if present.  Supercedes everything else.
      // 2) if 1 is blank, generate "ip-dns" for all ips.
      // 3) then, check plugin nodes for non-blank displayName for user generated devices (non-ip based)
      var defaultname: any = this.getNameFromDisplayName(node.displayName);
      //var typename:String=_gd.pluginDeviceList[_gd.selectedManagerID][_gd.selectedManagerType].name;
      //var pluginname:String=String(node.plugin.(@type==_gd.selectedManagerType).displayName);
      var retstring: any = defaultname;
      var offline: any = (/* Number(node.@status)& */ XMSConstants.GLOBAL_HEALTHSTAT_STATUSMASK) == XMSConstants.GLOBAL_HEALTHSTAT_NOTMANAGEABLE;

      // Use entity defaultname (displayName) as an override for everything else,
      // as it is what the user chose to name it
      if (defaultname == "") {
        // There is no entity displayName, so attempt to generate ip list
        // from entity ips
        var ipstring: string = "";
        var pnamestring: string = "";
        var l: any = node.ip;
        for (var i: number = 0; i < l.length(); i++) {
          if (String(l[i]) != "") {
            var ip: string = l[i].text();
            var dns: string = "l[i].@dns";
            var dnsusersetting: String = this.getUserSetting("showdns");
            if (dnsusersetting == "0") {
              dns = "";
            }
            ipstring += ip +
              (dns != "" ? (" - " + dns) : "") +
              (i < l.length() - 1 ? "\n" : "");
          }
        }
        if (ipstring != "") {
          // We have a name with ips
          retstring = ipstring;
        }
        else {
          // We still have no name, so attempt to generate displayName list from plugins (if any)
          //l=node.plugin.(hasOwnProperty('displayName')&& displayName!="");
          l = node.plugin;		// dont make processing each plugin line contingent on the presence of displayName...
          var llen: number = l.length();
          if (llen) {
            retstring += retstring ? "\n" : "";
            for (i = 0; i < llen; i++) {
              pnamestring += this.createDeviceNameStringfromNode(l[i]) + (i < llen - 1 ? "\n" : "");
              //pnamestring+=l[i].displayName+(i<llen-1?"\n":"");
            }
            retstring += pnamestring;
          }
        }
      }

      return retstring + ((offline && !ignoreoffline) ? " (OFFLINE)" : "");
    }
  }

  //______________________________________________________________________________
  //==============================================================================
  //            com.ami.projects.XMS/XMSUtils::getDeviceTypeString
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   devtype: Number -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getDeviceTypeString(devtype: Number, plugin: String = null): String {
    // var pid: String = (plugin == null ? _gd.currentActivePluginID : plugin);
    var pid: String = (plugin == null ? "_gd.currentActivePluginID" : plugin);
    // var pref: IXMSPlugins = getPluginReferencebyID(pid);
    var pref: any = this.getPluginReferencebyID(pid);
    return pref.getDeviceStringfromType(devtype);
  }

  getPluginName(plugin: String = null): String {
    var pid: String = (plugin == null ? "_gd.currentActivePluginID" : plugin);
    return "_gd.plugins[pid].localizedpluginname";
  }

  //______________________________________________________________________________
  //==============================================================================
  //              com.ami.projects.XMS/XMSUtils::processResponse
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   event: ResultEvent - the event to be passed from the xmit response.  It
  //   must be of the form
  // <response>
  //    <cc>0</cc>
  //    <devlist>
  //       <device id='xxx'>
  //          <cc>0</cc>
  //       </device>
  //    </devlist>
  // </response>
  //
  //   pretext: String="" - any text to show before the device specific results
  //
  //   posttext: String="" - any text to show after the device specific results
  //
  //   titleicon: Class - icon to use (paper note by default)
  //
  //   titletext: String - the text to show in the title of the popup
  //								Defaults to "Operation Results"
  //
  //   pluginid:String - the plugin id associated with this call. Mandatory
  //	   so device names can be formed, and proper error strings retrieved.
  //
  //   successcodes:Array - an array of non-zero codes that are to be considered
  //    success and not error.  Examples are "log full" etc.
  //    XMSConstants.XMIT_SUCCESS is added by default.
  //
  //   xscale:Number - scaling factors to size the popup relative to app height/width
  //	  yscale:Number   If zero then it defaults to popup fixed size.
  //
  // Output
  // ------
  //   Object - result object with the following properties:
  //     boolGlobalError - indicates if there was an error code anywhere
  //     boolXmitError - indicates if the operation cc was not successful
  //     xmitCCCode - the operation cc code
  //     deviceError - boolean that indicates there was some device error
  //     deviceErrors - an array of objects, with devid and err to indicate
  //                    deviceid and its specific error code
  //     popup - reference to the popup
  //
  //______________________________________________________________________________
  //==============================================================================

  processResponse(event: any, pretext: String, posttext: String,
    titleicon: any, titletext: String, pluginid: String, successcodes: any = null, xscale: Number = 0, yscale: Number = 0): Object {
    var outputString: String = "";
    var respcode: number = Number(event.result.cc);
    // Add in the normal success code
    if (successcodes == null) {
      successcodes = [XMSConstants.XMIT_SUCCESS];
    }
    else {
      successcodes.push(XMSConstants.XMIT_SUCCESS);	// add normal success code
    }

    // The response object.  This is an object that returns a bunch of useful
    // stuff.
    // boolGlobalError = boolean indicating SOME error occurred, boolXmitError =
    // boolean indicating a communication error (main cc code in response)
    // xmitCCCode = cc error code from the transaction boolDeviceError = boolean
    //                indicating if some device had anything other than success
    // deviceErrors = an array of error objects, defined by {devid:<deviceid>,
    // err:<error code>} popup = the actual popup object so I can access text fields
    // after showing it
    //
    var respObj: Object = {
      boolGlobalError: false,
      boolXmitError: false,
      xmitCCCode: XMSConstants.XMIT_SUCCESS,
      deviceError: false,
      deviceErrors: [],
      popup: null
    }

    // Set default title text
    if (titletext == "") {
      titletext = 'STR_XMSUTILS_OPERRESU';
      // titletext = lg.getString('STR_XMSUTILS_OPERRESU');
    }

    //------------------------------------------------------//
    // Create the popup
    //------------------------------------------------------//

		/* var pop: popupXMSAlert = popupXMSAlert(XMSUtils.alert(""));
		var neww: int = pop.width;
		var newh: int = pop.height;
		// we must check the new scaled height/width to make sure
		// we dont resize less than any given minWidth/minHeight
		// in the popup
		if (xscale) {
			neww = int(_app.width * xscale);
			if (neww > pop.minWidth) {
				pop.width = neww;
			}
		}
		if (yscale) {
			newh = int(_app.height * yscale);
			if (newh > pop.minHeight) {
				pop.height = newh;
			}
		}
		pop.x = int((_app.stage.width - pop.width) / 2);				// position x in middle
		var ypos: int = ((_app.stage.height - pop.height) / 2) * 0.5;	// cut y in half to position more towards top
		pop.y = ypos >= 0 ? ypos : 0;

		// Assign reference to response object
		respObj.popup = pop as popupXMSAlert;


		pop.titletext = titletext;
		pop.titleicon = (titleicon == null ? IconsGeneral.imgPaperLarge : titleicon);

		// See if this code is actually considered a success or failure
		var gok: Boolean = successcodes.indexOf(respcode) == -1 ? false : true;
		var gcol: String = (gok ? XMSConstants.COLOR_SUCCESS_TEXT_STR : XMSConstants.COLOR_FAIL_TEXT_STR);
		outputString = "<font size='+2'><b>" + "Operation Result" + "</b></font>" + "<br/>    " +
			"<font color='" + gcol + "'><b>" + XMSError.translateErrorCode(respcode, pluginid) + "</b></font><br/><br/>";

		//------------------------------------------------------//
		// Process response codes
		//------------------------------------------------------//
		if (respcode != XMSConstants.XMIT_SUCCESS) {
			respObj.xmitCCCode = respcode;
			respObj.boolGlobalError = true;
			respObj.boolXmitError = true;
		}
		// Changed 7/2/11 to process all devices nodes regardless of
		// global cc....
		// Check all device nodes for success
		var devlist: XMLList = event.result.devlist.device;
		var strerrcode: String = "";
		// process device and form a single error message

		var totaldevs: int = devlist.length();
		if (totaldevs) {
			outputString += "<font size='+2'><b>" + "Device Results" + "</b></font>" + "<br/>";
			for (var i: int = 0; i < totaldevs; i++) {
				var merr: int = Number(devlist[i].cc);
				// See if this code is actually considered a success or failure
				var ok: Boolean = successcodes.indexOf(merr) == -1 ? false : true;
				if (ok == false) {
					respObj.boolGlobalError = true;	//indicate some error
					respObj.boolDeviceError = true;	//indicate a device had an error
					respObj.deviceErrors.push({ devid: devlist[i].@id, err: merr
				});
			}
			strerrcode = XMSError.translateErrorCode(merr, pluginid);
			var col: String = (ok ? XMSConstants.COLOR_SUCCESS_TEXT_STR : XMSConstants.COLOR_FAIL_TEXT_STR);
			// Append result strings for each device cc
			outputString += "    <b><i>" + (i + 1) + "/" + totaldevs + "</i></b> : <b>" + XMSUtils.createDeviceNameString(devlist[i].@id, pluginid) +
				"</b> : <font color='" + col + "'><b>" + strerrcode + "</b></font><br/>";
		}
	}
	pop.text = pretext + "<br/><br/>" + outputString + "<br/><br/>" + posttext; */

    return respObj;
  }

  //______________________________________________________________________________
  //==============================================================================
  //            com.ami.projects.XMS/XMSUtils::getIPMIDatetoLocal
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   ts: uint -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getIPMIDatetoLocal(ts: number, zerostring: String = ""): String {
    if (ts > 32) {
      var x: Date = new Date(ts * 1000);	// Date constructor takes ms
      var ret: String = x.toLocaleString();
      return ret;
    }
    else {
      if (zerostring == "") {
        zerostring = 'STR_IPMI_PREINITDATE';
        // zerostring = lg.getString('STR_IPMI_PREINITDATE');
      }
      return zerostring;
    }
  }


  //______________________________________________________________________________
  //==============================================================================
  //                   com.ami.projects.XMS/XMSUtils::alert
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   txt: String -
  //
  // Output
  // ------
  //   IFlexDisplayObject -
  //
  //______________________________________________________________________________
  //==============================================================================

  alert(txt: String): any {
		/* alert(txt: String): IFlexDisplayObject {
			var _app: Object = mx.core.Application.application;
			var xx: IFlexDisplayObject = PopUpManager.createPopUp(_app as DisplayObject, popupXMSAlert, true);
			xx.x = _app.width / 2 - xx.width / 2;
			var ypos: int = ((_app.height - xx.height) / 2) * 0.5;
			xx.y = ypos >= 0 ? ypos : 0;
			popupXMSAlert(xx).text = txt;
			return xx; */
  }


  // Abstraction to the Alert.show function that allows use of html text instead of plain text.
  //
  //	IMPORTANT:  If you use HTML text in a string file, you *MUST* encode the tag delimiters, for example
  // &lt;br/&gt; = <br/>
  // You cannot mix the html tags inside the xml string files, or it will screw up.
  // Also, be careful if you add any blank lines...the component will not measure the blank space
  // and you may need to artificially increase the alert height.
  show(htmltext: string = "", title: string = "", flags: number = 0x4, parent: any = null,
    closehandler: Function = null, iconclass: any = null, defbutton: any = 0x4): any {
		/*var xx: Alert = Alert.show(htmltext, title, flags, parent, closehandler, iconclass, defbutton);
		xx.mx_internal:: alertForm.mx_internal:: textField.htmlText = htmltext;
		PopUpManager.centerPopUp(xx);
		return xx; */
  }
  //______________________________________________________________________________
  //==============================================================================
  //               com.ami.projects.XMS/XMSUtils::getIPfromHex
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   ips: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getIPfromHex(ips: String): String {
    var ar: Array<any> = ips.split(" ");
    var out: String = "";
    for (var i: number = 0; i < ar.length; i++) {
      out += parseInt(ar[i], 16) + (i < ar.length - 1 ? "." : "");
    }
    return out;
  }

  //______________________________________________________________________________
  //==============================================================================
  //               com.ami.projects.XMS/XMSUtils::getMACfromHex
  //------------------------------------------------------------------------------
  // Takes the hex bytes (separated by spaces) and converts to a mac address
  //
  // Input
  // -----
  //   mac: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getMACfromHex(mac: String): String {
    var ar: Array<any> = mac.split(" ");
    var out: String = "";
    for (var i: number = 0; i < ar.length; i++) {
      // parse it just to see if its < 16 to pad with a 0
      out += (parseInt(ar[i], 16) < 16 ? "0" : "") + ar[i] + (i < ar.length - 1 ? ":" : "");
    }
    return out;
  }

  //______________________________________________________________________________
  //==============================================================================
  //               com.ami.projects.XMS/XMSUtils::getHexfromMAC
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   mac: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getHexfromMAC(mac: String): String {
    // take the mac address from the given field and convert to the needed
    // format
    // mac string = xx:xx:xx:xx:xx:xx
    // It is assumed that validation has taken place, and all fields are
    // two-digit hex values separated by :

    return mac.replace(/\:/g, " ");
  }

  //______________________________________________________________________________
  //==============================================================================
  //               com.ami.projects.XMS/XMSUtils::getHexfromIP
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   ip: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getHexfromIP(ip: String): String {
    // take the ip address from the given field and convert to the needed
    // format
    // ip string = xxx.xxx.xxx.xxx

    var ar: Array<any> = ip.split(".");
    var out: string = "";
    var xx: string = "";
    var leading: String = "0";	// leading 0 for values <16
    for (var i: number = 0; i < ar.length; i++) {
      if (Number(ar[i] < 16)) {
        xx = leading + Number(ar[i]).toString(16);
      }
      else {
        xx = Number(ar[i]).toString(16);
      }
      out += xx + " ";
    }
    return out;
  }



  //______________________________________________________________________________
  //==============================================================================
  //                  com.ami.projects.XMS/XMSUtils::getHex
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   val: Number -
  //
  //   upper: Boolean=true -
  //
  //   leading: String="0x" -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getHex(val: Number, upper: Boolean = true, leading: string = "0x"): String {
    var res: String = Number(val).toString(16);
    if (upper) {
      res = res.toUpperCase();
    }
    return (leading + res);
  }


  //______________________________________________________________________________
  //==============================================================================
  //        com.ami.projects.XMS/XMSUtils::selectComboBoxIndexfromData
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   cmb: ComboBox -
  //
  //   data: Number -
  //
  // Output
  // ------
  //   void -
  //
  //______________________________________________________________________________
  //==============================================================================

  selectComboBoxIndexfromData(cmb: any, data: Object, datafield: string = "data"): void {
    var i: number = 0;

    for (i = 0; i < cmb.dataProvider.length; i++) {
      if (cmb.dataProvider[i][datafield] == data) {
        cmb.selectedIndex = i;
      }
    }

  }


  //______________________________________________________________________________
  //==============================================================================
  //                 com.ami.projects.XMS/XMSUtils::htmlBold
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   str: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  htmlBold(str: String): String {
    return "<b>" + str + "</b>";
  }

  //______________________________________________________________________________
  //==============================================================================
  //                com.ami.projects.XMS/XMSUtils::htmlItalic
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   str: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  htmlItalic(str: String): String {
    return "<i>" + str + "</i>";
  }
  //______________________________________________________________________________
  //==============================================================================
  //               com.ami.projects.XMS/XMSUtils::htmlColorSize
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   str: String -
  //
  //   color: String="" -
  //
  //   size: String="" -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  htmlColorSize(str: String, color: String = "", size: String = ""): String {
    return "<font size='" + size + "' color='" + color + "'>" + str + "</font>";
  }

  //______________________________________________________________________________
  //==============================================================================
  //                 com.ami.projects.XMS/XMSUtils::htmlStyle
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   str: String -
  //
  //   bold: Boolean=false -
  //
  //   italic: Boolean=false -
  //
  //   color: String="" -
  //
  //   size: String="" -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  htmlStyle(str: String, bold: Boolean = false, italic: Boolean = false, color: String = "", size: String = ""): String {
    if (bold) {
      str = this.htmlBold(str);
    }
    if (italic) {
      str = this.htmlItalic(str);
    }
    if ((color != "") || (size != "")) {
      str = this.htmlColorSize(str, color, size);
    }
    return str;

  }


  //______________________________________________________________________________
  //==============================================================================
  //              com.ami.projects.XMS/XMSUtils::getObjectLength
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   o: Object -
  //
  // Output
  // ------
  //   int -
  //
  //______________________________________________________________________________
  //==============================================================================

  getObjectLength(o: Object): number {
    var len: number = 0;
		/* for (var item: * in o)
			len++; */
    return len; 	// NOTE: this returns total length, including flex 'mx_internal_uid'
  }



  //______________________________________________________________________________
  //==============================================================================
  //                com.ami.projects.XMS/XMSUtils::offsetLeft
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   o:* -
  //
  // Output
  // ------
  //   int -
  //
  //______________________________________________________________________________
  //==============================================================================

  offsetLeft(o: any): number {
    var l: number = 0;

    while (o != null) {
      l += o.x;
      o = o.parent;
    }
    return l;
  }

  //______________________________________________________________________________
  //==============================================================================
  //                 com.ami.projects.XMS/XMSUtils::offsetTop
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   o:* -
  //
  // Output
  // ------
  //   int -
  //
  //______________________________________________________________________________
  //==============================================================================

  offsetTop(o: any): number {
    var t: number = 0;

    while (o != null) {
      t += o.y;
      o = o.parent;
    }
    return t;
  }


  //______________________________________________________________________________
  //==============================================================================
  //        com.ami.projects.XMS/XMSUtils::setupControlReadPermission
  //------------------------------------------------------------------------------
  //Given a control object and an action, this will effect whatever action is
  //necessary based on the current user's permission and the currently active
  //role.
  //
  //This function handles actions based on READ permission, and is typically used
  //when a control is DISABLED and/or HIDDEN by default.
  //
  //NOTE NOTE NOTE
  //This function uses the role value from the last clicked menu item.  Therefore,
  //only use this from within pages that are activated via the menu system.
  //
  // Input
  // -----
  //   obj: Object -
  //
  //   action: XMSConstants -
  //
  // Output
  // ------
  //   void -
  //
  //______________________________________________________________________________
  //==============================================================================

  setupControlReadPermission(obj: any, action: XMSConstants): void {
    // var user: User20 = _gd.currentUser;
    var user: any = "_gd.currentUser";
    var role: any = "_gd.currentRole";	// this is the role setting for the last menu item that was clicked
    var gotPermission: Boolean = user.checkReadAccess(role);
    switch (action) {
      case XMSConstants.CONTROLACTION_ENABLEDANDSHOW:
        obj.enabled = gotPermission;
        obj.includeInLayout = gotPermission;
        obj.visible = gotPermission;
        break;
      case XMSConstants.CONTROLACTION_ENABLE:
      default:
        obj.enabled = gotPermission;
        break;
    }
  }


  //______________________________________________________________________________
  //==============================================================================
  //        com.ami.projects.XMS/XMSUtils::setupControlWritePermission
  //------------------------------------------------------------------------------
  //Given a control object and an action, this will effect whatever action is
  //necessary based on the current user's permission and the currently active
  //role.
  //
  //This function handles actions based on WRITE permission, such as hiding or
  //disabling a Save button, and is typically used when a control is ENABLED and
  //SHOWING by default (the most common scenario).
  //
  //The default action is to DISABLE.
  //
  //NOTE NOTE NOTE
  //This function uses the role value from the last clicked menu item.  Therefore,
  //only use this from within pages that are activated via the menu system.
  //
  // obj The object
  // action The action to take, 0:disable and hide, 1:disable
  //
  //
  // Input
  // -----
  //   arObjectList: Array -
  //
  //   action: int=XMSConstants.CONTROLACTION_DISABLE -
  //
  //   bAllowEnable: Boolean=true - boolean that allows this function to ENABLE
  //	  the control, otherwise, it can only DISABLE
  //
  // Output
  // ------
  //   Boolean -
  //
  //______________________________________________________________________________
  //==============================================================================

  setupControlWritePermission(arObjectList: Array<any>, action: number = XMSConstants.CONTROLACTION_DISABLE, bAllowEnable: Boolean = true): Boolean {
    // bAllowEnable is a flag that basically allows this routine to disable OR enable controls depending on user permission.
    // This may not be desirable if other variables need to be factored into whether a control is enabled that have
    // nothing to do with permission.  If this is the case, then go ahead and run the code that sets up the controls
    // first, then call this function last with bAllowEnable set to false.  Then, controls will only be disabled ONLY if
    // the user does not have permission, and left alone otherwise.

    var user: any = "_gd.currentUser";
    var role: any = "_gd.currentRole";		// this is the role setting for the last menu item that was clicked
    // var user: User20 = _gd.currentUser;
    // var role: int = _gd.currentRole;		// this is the role setting for the last menu item that was clicked
    var gotPermission: Boolean = user.checkWriteAccess(role);
    var i: number = 0;
    switch (action) {
      case XMSConstants.CONTROLACTION_DISABLEANDHIDE:
        for (i = 0; i < arObjectList.length; i++) {
          if (bAllowEnable)	// if allow enabling, then set to enable or disable depending on permission
          {
            arObjectList[i].enabled = gotPermission;
            arObjectList[i].includeInLayout = gotPermission;
            arObjectList[i].visible = gotPermission;
          }
          else if (gotPermission == false)	// if we DO NOT allow enabling, then disable everything if user has no permission
          {
            arObjectList[i].enabled = false;
            arObjectList[i].includeInLayout = false;
            arObjectList[i].visible = false;
          }
          // else we do nothing, leave the control enabled
        }
        break;
      case XMSConstants.CONTROLACTION_DISABLE:
      default:
        for (i = 0; i < arObjectList.length; i++) {
          if (bAllowEnable)	// if allow enabling, then set to enable or disable depending on permission
          {
            arObjectList[i].enabled = gotPermission;
          }
          else if (gotPermission == false)	// if we DO NOT allow enabling, the disable everything if user has no permission
          {
            arObjectList[i].enabled = false;
          }

          // attempt to alter the tooltip of the control, if it has a tooltip.
          try {
            var erstr: String = "STR_XMSUTILS_YOUDONOTHAVESUFFPERM";//lg.getString("STR_XMSUTILS_YOUDONOTHAVESUFFPERM");
            if (!gotPermission) {

              arObjectList[i].toolTip = erstr;
            }
            else {
              if (arObjectList[i].toolTip == erstr) {
                arObjectList[i].toolTip = "";
              }
            }
						/*arObjectList[i].mouseOver=function(event:MouseEvent):void
						{
						var errorTip:ToolTip = ToolTipManager.createToolTip(
							  erstr, event.currentTarget.x + event.currentTarget.width, event.currentTarget.y) as ToolTip;
						errorTip.setStyle("styleName", "errorTip");
						}
						*/
          }
          catch (e) { }
        }
        break;
    }
    return gotPermission;	// just return permission as well in case further action needs to be taken
  }

  //______________________________________________________________________________
  //==============================================================================
  //             com.ami.projects.XMS/XMSUtils::checkWriteAccess
  //------------------------------------------------------------------------------
  // Abstraction to check users permission level for the current view.
  //
  //
  // Input
  // -----
  //   None
  //
  // Output
  // ------
  //   Boolean -
  //
  //______________________________________________________________________________
  //==============================================================================

  checkWriteAccess(): Boolean {
    // var user: User20 = _gd.currentUser;
    // var role: int = _gd.currentRole;
    var user: any = "_gd.currentUser";
    var role: any = "_gd.currentRole";
    var gotPermission: Boolean = user.checkWriteAccess(role);
    return gotPermission;
  }


  getPluginNodefromDevID(devid: string, pluginID: string): any {
    var node: any = devid + pluginID;
    // var node: any = _gd.xmlcDeviceList.source..plugin.(@epid== devid && @id== pluginID);
    if (node.length())
      return node[0];
    else
      return null;
  }


  //______________________________________________________________________________
  //==============================================================================
  //             com.ami.projects.XMS/XMSUtils::getNodefromDevID
  //------------------------------------------------------------------------------
  // Gets the device node from the master device list given the devide ID and
  // plugin id.
  //
  // This function attempts to construct and return a 2.0 compatible <device>
  // node to minimize change by plugin developers.
  //
  // Input
  // -----
  //   devid: String -
  //
  //   pluginID: String -
  //
  // Output
  // ------
  //   XMLList - list of matching xml nodes, should be just one [0] matching the following:
  //		<device
  //			devid="(epid of the device)"
  //			type="(device type)"
  //			pluginid="(pluginid)"
  //			parententityid="(id of the entity container group, use if necessary, see getEntityfromID)"
  //			entityDisplayName="(displayName of the parent entity)"
  //			pluginDisplayName="(displayName of the plugin device node with this epid)"
  //			displayname="(same as pluginDisplayName)"
  //			ipaddr="(ip address attached to this plugin device node)"
  //			status="(health status)"
  //			reasoncodes="(reason codes)"
  //			dnsname="(dns name attached to the ipaddr)"/>
  //
  //______________________________________________________________________________
  //==============================================================================

  getNodefromDevID(devid: string, pluginID: string): any {

    // A node that is backward compatible with 2.0 must look like this:
    //<device devid="hxpid2" type="1" pluginid="hx" ipaddr="172.99.97.2" displayname="" manageable="1" dnsname="Divya.us.megatrends.com"
    //status="18" activestatus="1" reasoncodes="0:1,1:1"/>

    // For 3.0, I must artificially create a backward compatible
    // node from the entity and subdvice information

    var devnode: any = devid + pluginID;
    // var devnode: XMLList = _gd.xmlcDeviceList.source..plugin.(@epid== devid && @id== pluginID);
    if (devnode.length() == 0) {
      return null;
    }
    var enode: any = devnode[0].parent();
    var dns: String = "enode.ip.(text() == devnode.ip[0]).@dns";

    //			var enode:XMLList=_gd.xmlcDeviceList.source.(@id==devid);
    //			var pnode:XMLList;
    //			pnode=enode[0].plugin.(@id==pluginID);	// XMS3.0
    //			var dns:String=enode.ip[0].(text()==pnode.ip[0]).@dns;

		/* var work: any =
			<root>
			<device
						devid={ devnode.@epid
	}
	type = { devnode.@type
	}
	pluginid = { pluginID }
	parententityid = { enode.@id}
	entityDisplayName = { getNameFromDisplayName(enode.displayName) }
	pluginDisplayName = { devnode.displayName }
	displayname = { devnode.displayName }
	ipaddr = { devnode.ip[0] }
	status = { devnode.@status}
	reasoncodes = { devnode.@reason}
	dnsname = { dns } />
		</root>; 

	return work.device;*/

  }



  //______________________________________________________________________________
  //==============================================================================
  //              com.ami.projects.XMS/XMSUtils::getEntityfromID
  //------------------------------------------------------------------------------
  // Returns an entity node given its id
  //
  // Input
  // -----
  //   devid: String -
  //
  // Output
  // ------
  //   XML -
  //
  //______________________________________________________________________________
  //==============================================================================

  getEntityfromID(eid: String): any {

    // var enode: XMLList = _gd.xmlcDeviceList.source.(@id== eid);
    var enode: any = " _gd.xmlcDeviceList.source.(@id== eid)";
    if (enode.length()) {
      return enode[0];
    }
    else {
      return null;
    }
  }

  //______________________________________________________________________________
  //==============================================================================
  //          com.ami.projects.XMS/XMSUtils::getPluginReferencebyID
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   pluginID: String -
  //
  // Output
  // ------
  //   IXMSPlugins -
  //
  //______________________________________________________________________________
  //==============================================================================

  getPluginReferencebyID(pluginID: String): any {
    // getPluginReferencebyID(pluginID: String): IXMSPlugins {
    var pref: any = null;
		/* if (_gd.plugins[pluginID]) {
			pref = (_gd.plugins[pluginID].pluginRef as IXMSPlugins);
		} */
    return pref;
  }


  //______________________________________________________________________________
  //==============================================================================
  //          com.ami.projects.XMS/XMSUtils::checkGUIReservedDevice
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   dtype: int -
  //
  // Output
  // ------
  //   Boolean -
  //
  //______________________________________________________________________________
  //==============================================================================

  checkGUIReservedDevice(dtype: number): Boolean {
    switch (dtype) {
      case XMSConstants.DEVTYPE_XMSSTARTUP:
        return true;
      default:
        return false;
    }
  }

  //______________________________________________________________________________
  //==============================================================================
  //           com.ami.projects.XMS/XMSUtils::checkSupportedDevice
  //------------------------------------------------------------------------------
  // This function really only checks to make sure that a) this is XMS2.0
  // and b) the type that is passed is not the built-in unsupported type.
  // Within XMS2.0, any other type will pass as true.
  //
  //
  // Input
  // -----
  //   dtype: int -
  //
  // Output
  // ------
  //   Boolean -
  //
  //______________________________________________________________________________
  //==============================================================================

  checkSupportedDevice(dtype: number): Boolean {
    if (this.checkPluginsSupported() == false) {
      return false
    }
    else if (dtype == XMSConstants.DEVTYPE_UNSUPPORTED) {
      return false;
    }
    else {
      return true;
    }
  }

  //______________________________________________________________________________
  //==============================================================================
  //           com.ami.projects.XMS/XMSUtils::checkPluginsSupported
  //------------------------------------------------------------------------------
  // Global utility function to see if we are running 2.0 with plugin support.
  // Use this for XMS1.0 conditional code branching.
  //
  //
  // Input
  // -----
  //   None
  //
  // Output
  // ------
  //   Boolean -
  //
  //______________________________________________________________________________
  //==============================================================================

  checkPluginsSupported(): Boolean {
		/* if (_gd.pluginDeviceList["base"] == undefined) {
			return false
		}
		else {
			return true;
		} */
    return true;
  }
  //______________________________________________________________________________
  //==============================================================================
  //                com.ami.projects.XMS/XMSUtils::showWindow
  //------------------------------------------------------------------------------
  // added x,yscale 12/10/2010 to allow the popup to size according to application window rather than fixed size
  // defined by the popup.  x,yscale is a value from 0-1, so to scale width to 80% of app you would specify .8.
  // 0 is the default and does not scale.
  //
  //
  // Input
  // -----
  //   window: Class -
  //
  //   modal: Boolean=true -
  //
  //   xscale: Number=0 -
  //
  //   yscale: Number=0 -
  //
  // Output
  // ------
  //   IFlexDisplayObject -
  //
  //______________________________________________________________________________
  //==============================================================================

  showWindow(window: any, modal: Boolean = true, xscale: Number = 0, yscale: Number = 0): any {
		/*var xx: IFlexDisplayObject = PopUpManager.createPopUp(DisplayObject(_app), window, modal);
		xx.addEventListener(FlexEvent.CREATION_COMPLETE, function (): void {
			var winclassinfo: XML = describeType(window);
			var impmin: Boolean = (winclassinfo..implementsInterface.(@type== "mx.core::IUIComponent")).length() > 0;
	
		if (xscale) {
			var neww: int = int(_app.width * xscale);
			if (impmin)	// this implements the IUIComponent interface, so check presence of minwidth and maxwidth and act accordingly
			{
				if (neww < IUIComponent(xx).minWidth) {
					xx.width = IUIComponent(xx).minWidth;
				}
				else if (neww > IUIComponent(xx).maxWidth) {
					xx.width = IUIComponent(xx).maxWidth;
				}
				else {
					xx.width = neww;
				}
			}
			else {
				xx.width = neww;
			}
		}
		if (yscale) {
			var newh: int = int(_app.height * yscale);
			if (impmin) // this implements the IUIComponent interface, so check presence of minwidth and maxwidth and act accordingly
			{
				if (newh < IUIComponent(xx).minHeight) {
					xx.height = IUIComponent(xx).minHeight;
				}
				else if (newh > IUIComponent(xx).maxHeight) {
					xx.height = IUIComponent(xx).maxHeight;
				}
				else {
					xx.height = newh;
				}
			}
			else {
				xx.height = newh;
			}
		}
		var willtherealheightpleasestandup: int = xx.measuredHeight > xx.height ? xx.measuredHeight : xx.height;
		// final height check for fitting
		//				if (willtherealheightpleasestandup>_app.height)
		//					{
		//					xx.height=_app.height;
		//					}
		if (xx.height + 30 > _app.height) {
			xx.height = _app.height;
		}
		xx.x = int((_app.width - xx.width) / 2);				// position x in middle
		var ypos: int = ((_app.height - xx.height) / 2) * 0.5;	// cut y in half to position more towards top
		xx.y = ypos >= 0 ? ypos : 0;
	});
	return xx;*/
  }

  //______________________________________________________________________________
  //==============================================================================
  //            com.ami.projects.XMS/XMSUtils::showWindowatCursor
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   window: Class -
  //
  //   offsetX: int=10 -
  //
  //   offsetY: int=10 -
  //
  //   modal: Boolean=true -
  //
  // Output
  // ------
  //   IFlexDisplayObject -
  //
  //______________________________________________________________________________
  //==============================================================================

  showWindowatCursor(window: any, offsetX: number = 10, offsetY: number = 10, modal: Boolean = true): any {
		/* var xx: IFlexDisplayObject = PopUpManager.createPopUp(DisplayObject(mx.core.Application.application), window, modal);
		xx.x = _gd.mouseX + offsetX;
		var miny: int = _app.height - xx.height - 75;	// see how low we should go before popup becomes clipped, with pixel buffer
		xx.y = Math.min(_gd.mouseY + offsetY, miny);
		return xx; */
  }
  //______________________________________________________________________________
  //==============================================================================
  //                  com.ami.projects.XMS/XMSUtils::getApp
  //------------------------------------------------------------------------------
  // Abstraction function for getting application
  //
  //
  // Input
  // -----
  //   None
  //
  // Output
  // ------
  //   Object -
  //
  //______________________________________________________________________________
  //==============================================================================

  getApp(): Object {
    return {};
    // return _app;
  }

  //______________________________________________________________________________
  //==============================================================================
  //                  com.ami.projects.XMS/XMSUtils::getGDC
  //------------------------------------------------------------------------------
  // Abstraction function for getting global data class (XMSData)
  //
  //
  // Input
  // -----
  //   None
  //
  // Output
  // ------
  //   XMSData -
  //
  //______________________________________________________________________________
  //==============================================================================

  getGDC(): XMSData {
    return {};
    // return _gd;
  }

  //______________________________________________________________________________
  //==============================================================================
  //              com.ami.projects.XMS/XMSUtils::adjustFontSize
  //------------------------------------------------------------------------------
  // adjust the font size on all defined CSS styles by increasing or decreasing pixel size
  //
  //
  // Input
  // -----
  //   increment: Number -
  //
  // Output
  // ------
  //   void -
  //
  //______________________________________________________________________________
  //==============================================================================

  adjustFontSize(increment: Number, specificstylename: String = ""): void {

		/* if (increment == 0)
			return;
		var css: CSSStyleDeclaration;
		var fontSize: Number = 0;
		if (specificstylename != "") {
			css = CSSStyleDeclaration(StyleManager.getStyleDeclaration(specificstylename));
			if (css.getStyle("fontSize") != null) {
				fontSize = Number(css.getStyle("fontSize"));
				css.setStyle("fontSize", fontSize + increment);
			}
		}
		else {
			var selectors: Array = StyleManager.selectors;
	
			for each(var selector: String in selectors)
			{
				css = CSSStyleDeclaration(StyleManager.getStyleDeclaration(selector));
				// assume here that all font sizes in the application
				// are explicitly set by pixel size in the CSS
				if (css.getStyle("fontSize") != null) {
					fontSize = Number(css.getStyle("fontSize"));
					css.setStyle("fontSize", fontSize + increment);
				}
			}
		} */
  }

  //______________________________________________________________________________
  //==============================================================================
  //           com.ami.projects.XMS/XMSUtils::createCauseCodeString
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   causecode: int -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  createCauseCodeString(causecode: number): string {
    var htmlString: string = "";
    var arModProp: Array<any>;
    switch (Number(causecode)) {
      // NOTE:  the secondary string is used when localization is not present
      case XMSConstants.CAUSECODE_START:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_STAR") : */ "Start";
        break;
      case XMSConstants.CAUSECODE_STOP:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_STOP") : */ "Stop";
        break;
      case XMSConstants.CAUSECODE_PAUSE:
        htmlString =/*  lg ? lg.getString("STR_XMSUTILS_PAUS") : */ "Pause";
        break;
      case XMSConstants.CAUSECODE_RESUME:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_RESU") : */ "Resume";
        break;
      case XMSConstants.CAUSECODE_THRESHOLD:
        htmlString =/*  lg ? lg.getString("STR_XMSUTILS_THRE") : */ "Threshold";
        break;
      case XMSConstants.CAUSECODE_OPEN:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_OPEN") : */ "Open";
        break;
      case XMSConstants.CAUSECODE_CLOSE:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_CLOS") : */ "Close";
        break;
      case XMSConstants.CAUSECODE_VALUEMOD:
        htmlString =/*  lg ? lg.getString("STR_XMSUTILS_MODI") : */ "Modifed";
        break;
      case XMSConstants.CAUSECODE_RUNNING:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_RUNNPROG") : */ "Running/In Progress";
        break;
      case XMSConstants.CAUSECODE_COMPLETE:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_COMP") : */ "Complete";
        break;
      case XMSConstants.CAUSECODE_FAILED:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_FAIL") : */ "Failed";
        break;
      case XMSConstants.CAUSECODE_SUCCEEDED:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_SUCC") : */ "Succeeded";
        break;
      case XMSConstants.CAUSECODE_ADDED:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_ADDE") : */ "Added";
        break;
      case XMSConstants.CAUSECODE_REMOVED:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_REMO") : */ "Removed";
        break;
      case XMSConstants.CAUSECODE_IGNORED:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_IGNO") : */ "Ignored";
        break;
      case XMSConstants.CAUSECODE_RESTARTED:
        htmlString = /* lg ? lg.getString("STR_XMSUTILS_REST") : */ "Restarted";
        break;
      default:
        htmlString +=/*  lg ? lg.getString("STR_XMSUTILS_UNKN") : */ "Unknown";
        break;
    }
    return htmlString;
  }


  //______________________________________________________________________________
  //==============================================================================
  //           com.ami.projects.XMS/XMSUtils::getGlobalHealthString
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   health: int -
  //
  //   showtrap: Boolean=true -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getGlobalHealthString(health: number, showtrap: Boolean = true): string {
    var retString: string = "";
    var trap: Boolean = Boolean(XMSConstants.GLOBAL_HEALTHSTAT_TRAPMASK & health);
    switch (Number(health) & 0xf) {
      // NOTE:  the secondary string is used when localization is not present
      case XMSConstants.GLOBAL_HEALTHSTAT_UNKNOWN:
        retString = /* lg ? lg.getString("STR_XMSUTILS_PENDING") : */ "Unknown/Pending";
        break;
      case XMSConstants.GLOBAL_HEALTHSTAT_GOOD:
        retString = /* lg ? lg.getString("STR_XMSUTILS_GOOD") : */ "Good";
        break;
      case XMSConstants.GLOBAL_HEALTHSTAT_WARN:
        retString = /* lg ? lg.getString("STR_XMSUTILS_WARN") : */ "Warning";
        break;
      case XMSConstants.GLOBAL_HEALTHSTAT_CRITICAL:
        retString = /* lg ? lg.getString("STR_XMSUTILS_CRIT") : */ "Critical";
        break;
      case XMSConstants.GLOBAL_HEALTHSTAT_NONRECOVERABLE:
        retString = /* lg ? lg.getString("STR_XMSUTILS_NON") : */ "NonRecoverable";
        break;
      case XMSConstants.GLOBAL_HEALTHSTAT_INFORMATION:
        retString = /* lg ? lg.getString("STR_XMSUTILS_INFO") : */ "Information";
        break;
      case XMSConstants.GLOBAL_HEALTHSTAT_UPDATEMODE:
        retString = /* lg ? lg.getString("STR_XMSUTILS_UPDAT") : */ "Update";
        break;
      case XMSConstants.GLOBAL_HEALTHSTAT_NOTMANAGEABLE:
        retString =/*  lg ? lg.getString("STR_XMSUTILS_NOTMANAG") : */ "Offline";
        break;
      case XMSConstants.GLOBAL_HEALTHSTAT_UNLICENSED:
        retString = /* lg ? lg.getString("STR_XMSUTILS_UNLICENSED") : */ "Unlicensed";
        break;
      default:
        retString += "-";
        break;
    }
    if (trap && showtrap) {
      retString += ", " + (/* lg ? lg.getString("STR_XMSUTILS_TRAPRECE") : */ "Trap Detected");
    }
    return retString;
  }


  //______________________________________________________________________________
  //==============================================================================
  //            com.ami.projects.XMS/XMSUtils::getGlobalHealthIcon
  //------------------------------------------------------------------------------
  //
  //
  //
  // Input
  // -----
  //   health: int -
  //
  //   size: int= HEALTHICONSIZE_TINY=0, HEALTHICONSIZE_SMALL=1, HEALTHICONSIZE_MED=2,
  //					HEALTHICONSIZE_LARGE=3
  //
  // Output
  // ------
  //   Class -
  //
  //______________________________________________________________________________
  //==============================================================================

  getGlobalHealthIcon(health: number, size: number = 1): any {
    var retIcon: any = null;
    //var trap:Boolean=Boolean(XMSConstants.GLOBAL_HEALTHSTAT_TRAPMASK&health);

    var iconmap: Array<any> = [];
    // iconmap[XMSConstants.GLOBAL_HEALTHSTAT_UNKNOWN] = [IconsStatus.imgUnknown_Round_Tiny, IconsStatus.imgUnknown_Round_Small, IconsStatus.imgUnknown_Round_Med, IconsStatus.imgUnknown_Round_Large];
    // iconmap[XMSConstants.GLOBAL_HEALTHSTAT_GOOD] = [IconsStatus.imgGood_Round_Tiny, IconsStatus.imgGood_Round_Small, IconsStatus.imgGood_Round_Med, IconsStatus.imgGood_Round_Large];
    // iconmap[XMSConstants.GLOBAL_HEALTHSTAT_WARN] = [IconsStatus.imgWarn_Round_Tiny, IconsStatus.imgWarn_Round_Small, IconsStatus.imgWarn_Round_Med, IconsStatus.imgWarn_Round_Large];
    // iconmap[XMSConstants.GLOBAL_HEALTHSTAT_CRITICAL] = [IconsStatus.imgCritical_Round_Tiny, IconsStatus.imgCritical_Round_Small, IconsStatus.imgCritical_Round_Med, IconsStatus.imgCritical_Round_Large];
    // iconmap[XMSConstants.GLOBAL_HEALTHSTAT_NONRECOVERABLE] = [IconsStatus.imgNonRecoverable_Round_Tiny, IconsStatus.imgNonRecoverable_Round_Small, IconsStatus.imgNonRecoverable_Round_Med, IconsStatus.imgNonRecoverable_Round_Large];
    // iconmap[XMSConstants.GLOBAL_HEALTHSTAT_INFORMATION] = [IconsGeneral.imgPaper, IconsGeneral.imgPaper, IconsGeneral.imgPaperLarge, IconsGeneral.imgPaperLarge];
    // iconmap[XMSConstants.GLOBAL_HEALTHSTAT_UPDATEMODE] = [IconsStatus.imgUpdate_Round_Small, IconsStatus.imgUpdate_Round_Small, IconsStatus.imgUpdate_Round_Large, IconsStatus.imgUpdate_Round_Large];
    // iconmap[XMSConstants.GLOBAL_HEALTHSTAT_NOTMANAGEABLE] = [IconsStatus.imgNotAllowed_Tiny, IconsStatus.imgNotAllowed_Small, IconsStatus.imgNotAllowed_Large, IconsStatus.imgNotAllowed_Large];


    switch (Number(health) & 0xf) {
      case XMSConstants.GLOBAL_HEALTHSTAT_GOOD:
      case XMSConstants.GLOBAL_HEALTHSTAT_WARN:
      case XMSConstants.GLOBAL_HEALTHSTAT_CRITICAL:
      case XMSConstants.GLOBAL_HEALTHSTAT_NONRECOVERABLE:
      case XMSConstants.GLOBAL_HEALTHSTAT_UNKNOWN:
      case XMSConstants.GLOBAL_HEALTHSTAT_INFORMATION:
      case XMSConstants.GLOBAL_HEALTHSTAT_UPDATEMODE:
      case XMSConstants.GLOBAL_HEALTHSTAT_NOTMANAGEABLE:
        retIcon = iconmap[Number(health) & 0xf][size];
        break;

      case XMSConstants.GLOBAL_HEALTHSTAT_DONOTASSIGN:
      default:	// leave default as null (no icon)
        break;
    }
    return retIcon;
  }

  //______________________________________________________________________________
  //==============================================================================
  //             com.ami.projects.XMS/XMSUtils::getTaskStatusIcon
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   stat: int -
  //
  // Output
  // ------
  //   Class -
  //
  //______________________________________________________________________________
  //==============================================================================

  getTaskStatusStyles(stat: number): any {
    // getTaskStatusStyles(stat: int): XMSTaskStyles {
		/* var ts: XMSTaskStyles = new XMSTaskStyles();
		switch (stat) {
			case XMSConstants.GLOBAL_TASKSTAT_COMPLETESUCCESS:
				ts.icon = IconsTasks.imgTaskSuccess;
				ts.iconsmall = IconsTasks.imgTaskSuccessSmall;
				ts.messagecolorstr = XMSConstants.COLOR_SUCCESS_TEXT_STR;
				ts.messagecolor = XMSConstants.COLOR_SUCCESS_TEXT;
				ts.message = lg.getString('STR_TASKCONSOLE_COMPLS');
				break;
			case XMSConstants.GLOBAL_TASKSTAT_COMPLETEFAIL:
				ts.icon = IconsTasks.imgTaskFail;
				ts.iconsmall = IconsTasks.imgTaskFailSmall;
				ts.messagecolorstr = XMSConstants.COLOR_FAIL_TEXT_STR;
				ts.messagecolor = XMSConstants.COLOR_FAIL_TEXT;
				ts.message = lg.getString('STR_TASKCONSOLE_COMPLF');
				break;
			case XMSConstants.GLOBAL_TASKSTAT_COMPLETECANCELED:
				ts.icon = IconsTasks.imgTaskCanceled;
				ts.iconsmall = IconsTasks.imgTaskCanceledSmall;
				ts.messagecolorstr = XMSConstants.COLOR_FAIL_TEXT_STR;
				ts.messagecolor = XMSConstants.COLOR_FAIL_TEXT;
				ts.message = lg.getString('STR_TASKCONSOLE_COMPLC');
				break;
			case XMSConstants.GLOBAL_TASKSTAT_RUNNING:
				ts.icon = IconsTasks.swfTaskRunning;
				ts.iconsmall = null;
				ts.messagecolorstr = XMSConstants.COLOR_SUCCESS_TEXT_STR;
				ts.messagecolor = XMSConstants.COLOR_SUCCESS_TEXT;
				ts.message = lg.getString('STR_TASKCONSOLE_RUNNI');
				break;
			case XMSConstants.GLOBAL_TASKSTAT_PENDING:
				ts.icon = IconsTasks.imgTaskPending;
				ts.iconsmall = null;
				ts.messagecolorstr = XMSUtils.getStyleAsColor(".compStatusLabelsLightItalic", "color");
				ts.messagecolor = XMSUtils.getStyle(".compStatusLabelsLightItalic", "color");
				ts.message = lg.getString('STR_TASKCONSOLE_PENDI');
				break;
			case XMSConstants.GLOBAL_TASKSTAT_DEFERRED:
				ts.icon = IconsTasks.imgTaskPending;
				ts.iconsmall = null;
				ts.messagecolorstr = XMSUtils.getStyleAsColor(".compStatusLabelsLightItalic", "color");
				ts.messagecolor = XMSUtils.getStyle(".compStatusLabelsLightItalic", "color");
				ts.message = lg.getString('STR_TASKCONSOLE_DEFERRED');
				break;
			default:
				break;
		} 
		return ts;*/
  }


  //______________________________________________________________________________
  //==============================================================================
  //              com.ami.projects.XMS/XMSUtils::getDeviceIcons
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   node: XML -
  //
  // Output
  // ------
  //   Object -
  //
  //______________________________________________________________________________
  //==============================================================================

  getDeviceIcons(node: any): Object {
    // function getDeviceIcons(node: XML): Object {
    // var pref: IXMSPlugins;
    var iconset: Object = {};
		/* if (node == null) {
			return { medicon: null, lrgicon: null };
		}
		else {
			pref = XMSUtils.getPluginReferencebyID(node.@pluginid);
			iconset = pref.getDeviceIcons(node as XML);
			return iconset;
		} */
    return iconset;
  }


  //______________________________________________________________________________
  //==============================================================================
  //                 com.ami.projects.XMS/XMSUtils::roundDec
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   numIn: Number -
  //
  //   decimalPlaces: int -
  //
  // Output
  // ------
  //   Number -
  //
  //______________________________________________________________________________
  //==============================================================================

  roundDec(numIn: number, decimalPlaces: number): Number {
    var nExp: number = Math.pow(10, decimalPlaces);
    var nRetVal: number = Math.round(numIn * nExp) / nExp;
    return nRetVal;
  }

  //______________________________________________________________________________
  //==============================================================================
  //                    com.ami.projects.XMS/XMSUtils::db
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   msg: String -
  //
  //   typeoverride: String="MessagingWindow.MWTYPE_DEBUG" -
  //
  // Output
  // ------
  //   void -
  //
  //______________________________________________________________________________
  //==============================================================================

  db(msg: String, typeoverride: String = "MessagingWindow.MWTYPE_DEBUG"): void {
    // Developer Note:
    // In case you did not know, you normally cannot initialize a property with an imported
    // constant.  In a lot of cases, it will work, but sometimes it will not.  This depends
    // entirely on the order in which the flex compiler chooses the classes to compile, and
    // therefore becomes "aware" of the const definitions in the class.  As far as I know
    // we do not have control over this order when compiling with Flex Builder.
    // As a general rule, if the constant initializer is in the same file, it will work OK.
    // If it is imported, it may or may not.  (This does not apply to Flex built-in constants)
    // If you encounter this error, (1047), set the property to the string-equivalant of
    // the constant name or some other crazy thing, then use a conditional to assign the
    // proper imported constant.
    //
    // typeoverride = (typeoverride == "MessagingWindow.MWTYPE_DEBUG" ? MessagingWindow.MWTYPE_DEBUG : typeoverride);
    // MessagingWindow.out(msg, typeoverride);
  }

  //______________________________________________________________________________
  //==============================================================================
  //                    com.ami.projects.XMS/XMSUtils::dbi
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   msg: String -
  //
  // Output
  // ------
  //   void -
  //
  //______________________________________________________________________________
  //==============================================================================

  dbi(msg: String): void {
    // MessagingWindow.out(msg, MessagingWindow.MWTYPE_DEBUG_INIT);
  }

  //______________________________________________________________________________
  //==============================================================================
  //            com.ami.projects.XMS/XMSUtils::getTokenfromString
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   token: String - token to find Ex: aaa
  //
  //   source: String - tokenized source to parse Ex aaa=111&bbb=222&ccc=333
  //
  // Output
  // ------
  //   String - token string value or "" if not found
  //
  //______________________________________________________________________________
  //==============================================================================

  getTokenfromString(token: string, source: string): String {
    var re: RegExp = new RegExp(token + "=([^&]+)(?:$|&)");
    var ar: Array<any> = re.exec(source);
    if (ar != null) {
      return ar[1];
    }
    else
      return "";
  }

  //______________________________________________________________________________
  //==============================================================================
  //              com.ami.projects.XMS/XMSUtils::getUserSetting
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   token: String - user setting token to find Ex: aaa
  //
  // Output
  // ------
  //   String - token string value or "" if not found
  //
  //______________________________________________________________________________
  //==============================================================================

  getUserSetting(token: string): string {
    // return getTokenfromString(token, _gd.userLocalPrefs);
    return "";
  }

  //______________________________________________________________________________
  //==============================================================================
  //            com.ami.projects.XMS/XMSUtils::addEditUserSetting
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   token: String -  adds a token to the user setting definitions
  //
  //   value: String - token string value
  //
  // Output
  // ------
  //   void -
  //
  //______________________________________________________________________________
  //==============================================================================

  addEditUserSetting(token: string, value: string): void {
		/* var so: SharedObject = SharedObject.getLocal("XMSSettings");
		var current: String = getTokenfromString(token, _gd.userLocalPrefs);
		if (current == "") {
			_gd.userLocalPrefs += (_gd.userLocalPrefs != "" ? "&" : "") + token + "=" + value;
			so.data.usersettings = _gd.userLocalPrefs;
			so.flush();
		}
		else {	// exists.  break apart and reconstruct.
			var items: Array = _gd.userLocalPrefs.split("&");
			var newstring: String = "";
			var subitem: Array = [];
			for (var i: int = 0; i < items.length; i++) {
				subitem = items[i].split("=");
				if (subitem[0] == token) {
					items[i] = token + "=" + value;
				}
				newstring += items[i] + (i < items.length - 1 ? "&" : "");
			}
	
			_gd.userLocalPrefs = newstring;
			so.data.usersettings = newstring;
			so.flush();
		} */
  }


  //______________________________________________________________________________
  //==============================================================================
  //             com.ami.projects.XMS/XMSUtils::isDeviceSelected
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   devid: String -
  //
  //   pluginid: String -
  //
  // Output
  // ------
  //   Boolean -
  //
  //______________________________________________________________________________
  //==============================================================================
  isDeviceSelected(devid: string, pluginid: string): Boolean {
    var isSel: Boolean = false;
    // first check if device plugin id is the active view
		/* if (_gd.currentActivePluginID == pluginid) {
			// now look for the id in the _gd.s
			var len: int = _gd.selectedDeviceList.length
			for (var i: int = 0; i < len; i++) {
				if (_gd.selectedDeviceList[i] == devid) {
					isSel = true;
					break;	//
				}
			}
		} */
    return isSel;

  }

  //______________________________________________________________________________
  //==============================================================================
  //               com.ami.projects.XMS/XMSUtils::getAlertDests
  //------------------------------------------------------------------------------
  // Given an array of recipient ids, this function will return
  // an array of objects with the following properties:
  // id:given id
  // type:type of recipient
  // dest:the 'dest' field as appropriate for the type
  // These are the common fields across recipient types.
  // This function is mainly used to generate summary lists of destinations
  // in alert grids.
  //
  //
  // Input
  // -----
  //   sourceids: Array -
  //
  //   callback: Object -
  //
  // Output
  // ------
  //   void -
  //
  //______________________________________________________________________________
  //==============================================================================

  getAlertDests(sourceids: Array<any>, callback: Object): void {
		/* Xmit.getData("/addressbook/get", "", function (event: ResultEvent): void {
			var work: Array = [];
			for (var i: int = 0; i < sourceids.length; i++) {
				var xx: XMLList = event.result.recipient.(@id== sourceids[i]);
		if (xx.length()) {
			work.push({
				id: Number(xx[0].@id),
			type: Number(xx[0].@type),
			dest: xx[0].@dest
		});
	}
					}
	callback(work);
				}, Xmit.alertError); */

  }




  //______________________________________________________________________________
  //==============================================================================
  //                 com.ami.projects.XMS/XMSUtils::getStyle
  //------------------------------------------------------------------------------
  //	Gets a style from stylemanager's declarations.
  // Use this for MXML tags, for example in a datagrid column (which does not support
  // styleNames...)
  // backgroundColor="{XMSUtils.getStyle('.compSpecialGridColumns','backgroundColor')}"
  //
  //	IMPORTANT NOTE:  when accessing specific styles, use the compact form of the style
  // name, even if it is written in the style sheet with the '-' notation.
  // For example, if the css style had "background-color" defined, you would still
  // access it using "backgroundColor".
  //
  // Input
  // -----
  //   stylename: String - stylename (with leading "." if necessary)
  //
  //   style: * -
  //
  // Output
  // ------
  //   int -
  //
  //______________________________________________________________________________
  //==============================================================================

  getStyle(stylename: String, style: String): any {
    // return StyleManager.getStyleDeclaration(stylename).getStyle(style);
  }

  //______________________________________________________________________________
  //==============================================================================
  //              com.ami.projects.XMS/XMSUtils::getStyleAsColor
  //------------------------------------------------------------------------------
  // Outputs a color string as #xxxxxx given a style name and style to extract
  // (typically "color" but it could be something else)
  //
  // Input
  // -----
  //   stylename: String - stylename (with leading "." if necessary)
  //
  //   style: String -
  //
  // Output
  // ------
  //   String - encoded hex rgb color string "#xxxxxx"
  //
  //______________________________________________________________________________
  //==============================================================================

  getStyleAsColor(stylename: String, style: String): any {
    // var c: int = getStyle(stylename, style) as Number;
    // return ("#" + c.toString(16));
  }




  //______________________________________________________________________________
  //==============================================================================
  //               com.ami.projects.XMS/XMSUtils::getProtocolId
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   plugin: String -
  //
  //   protocolname: String -
  //
  // Output
  // ------
  //   int -
  //
  //______________________________________________________________________________
  //==============================================================================

  getProtocolId(pluginID: string, protocolname: string): number {
    var protocollist: any = "";//_gd.protocols.(attribute('name') == protocolname && attribute('plugin') == pluginID);
    var ret: number = -1;
		/* if (protocollist.length() > 0) {
			ret = Number(protocollist[0].@id);
		} */
    return ret;
  }


  //______________________________________________________________________________
  //==============================================================================
  //           com.ami.projects.XMS/XMSUtils::getProtocolNamefromId
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   pid: int -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getProtocolNamefromId(pid: number): string {
    var strProtname: string = "STR_XMSUTILS_UNKN";
    // var strProtname: String = lg.getString("STR_XMSUTILS_UNKN");
		/* var protocolobject: XMLList = _gd.protocols.(attribute('id') == String(pid));
		if (protocolobject.length() > 0) {
			var ref: IXMSPlugins = _gd.plugins[protocolobject.@plugin].pluginRef;
			strProtname = ref.getProtocolInfo(protocolobject.@name).name;
		} */
    return strProtname;
  }


  //______________________________________________________________________________
  //==============================================================================
  //              com.ami.projects.XMS/XMSUtils::getCategoryName
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   catid: int -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getCategoryName(catid: string): string {
    var strRet: string = "STR_XMSUTILS_UNKN";
		/* var strRet: String = lg.getString("STR_XMSUTILS_UNKN");
		if (_gd.arCategories[catid] != undefined) {
			strRet = _gd.arCategories[catid].label;
		} */
    return strRet;
  }

  //______________________________________________________________________________
  //==============================================================================
  //             com.ami.projects.XMS/XMSUtils::checkIfUpdateMode
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   status: int -
  //
  // Output
  // ------
  //   Boolean -
  //
  //______________________________________________________________________________
  //==============================================================================

  checkIfUpdateMode(status: number): Boolean {
    return (status & XMSConstants.GLOBAL_HEALTHSTAT_STATUSMASK) == XMSConstants.GLOBAL_HEALTHSTAT_UPDATEMODE;
  }


  //______________________________________________________________________________
  //==============================================================================
  //          com.ami.projects.XMS/XMSUtils::getNameFromDisplayName
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   displayname: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  getNameFromDisplayName(displayname: string): string {
    var keywordsstart: number = displayname.indexOf("#");
    if (keywordsstart == -1) {
      return displayname;
    }
    else {
      return displayname.substring(0, keywordsstart);
    }
  }

  //______________________________________________________________________________
  //==============================================================================
  //        com.ami.projects.XMS/XMSUtils::getKeywordsFromDisplayName
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   displayname: String -
  //
  // Output
  // ------
  //   Array -
  //
  //______________________________________________________________________________
  //==============================================================================

  getKeywordsFromDisplayName(displayname: string): Array<any> {
    var arRet: Array<any> = [];
    var keywordsstart: number = displayname.indexOf("#");
    if (keywordsstart != -1) {
      arRet = (displayname.substring(keywordsstart + 1)).split(/\s*,\s*/);
    }
    return arRet;
  }

  getKeywordsStringFromDisplayName(displayname: String): string {
    var retstr: string = "";
    var keywordsstart: number = displayname.indexOf("#");
    if (keywordsstart != -1) {
      retstr = displayname.substring(keywordsstart + 1);
    }
    return retstr;
  }
  //______________________________________________________________________________
  //==============================================================================
  //         com.ami.projects.XMS/XMSUtils::setKeywordstoDisplayName
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   item: Object - the entity node
  //
  //   keywords: String -
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  setKeywordstoDisplayName(item: Object, keywords: string): string {
    var oldname: string = "this.getNameFromDisplayName(item.displayName)";
    var words: Array<any> = keywords.split(/\s*,\s*/);	// get words out of user's string and trim space
    var wordstr: String = "";
    for (var i: number; i < words.length; i++) {
      if (words[i] != "") {
        wordstr += words[i] + (i < words.length - 1 ? "," : "");
      }
    }
    // item.displayName = oldname + "#" + wordstr;
    return oldname + "#" + wordstr;
  }


  //______________________________________________________________________________
  //==============================================================================
  //               com.ami.projects.XMS/XMSUtils::tokenReplace
  //------------------------------------------------------------------------------
  // Takes an input string encoded with a sequence of %1, %2 and replaces those
  // tokens with the appropriate array item.
  //
  // This routine is typically used to insert numeric values into single strings
  // where breaking the string into substrings would be difficult for translators to
  // understand.  By using the %n tokens, I can use one single string (and hopefully
  // the tokens will be left intact).
  //
  // THE TOKEN NUMBERS ARE ARRAY INDEX+1.
  //
  // Input
  // -----
  //   origstring: String - original string, e.g. "There are %1 devices out of %2 selected"
  //
  //   tokens: Array -	array of token strings to substiute, e.g. ["4","10"]
  //
  // Output
  // ------
  //   String - decoded string, e.g. "There are 4 devices out of 10 selected"
  //
  //______________________________________________________________________________
  //==============================================================================
  tokenReplace(origstring: string, tokens: Array<any>): string {
    var i: number = 0;
    var len: number = tokens.length;
    for (i = 0; i < len; i++) {
      var re: RegExp = new RegExp("%" + (i + 1), "g");
      origstring = origstring.replace(re, tokens[i]);
    }
    return origstring;
  }
  //______________________________________________________________________________
  //==============================================================================
  //                 com.ami.projects.XMS/XMSUtils::getDepth
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   item: Object -
  //
  // Output
  // ------
  //   int -
  //
  //______________________________________________________________________________
  //==============================================================================
  getDepth(item: Object): number {
    var count: number = 0;
    var itemwork: Object = item;
		/* while ((itemwork = itemwork.parent()) != null) {
			count++;
		} */
    return count;
  }

  //______________________________________________________________________________
  //==============================================================================
  //           com.ami.projects.XMS/XMSUtils::getIconbyClassandName
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   classandname: String -
  //
  // Output
  // ------
  //   Class -
  //
  //______________________________________________________________________________
  //==============================================================================

  getIconbyClassandName(classandname: string): any {
    var retval: any = null;
		/* var iconname: String = classandname.substring(classandname.lastIndexOf('.') + 1);
		var iconclass: String = classandname.substring(0, classandname.lastIndexOf('.'));
		var icontargetclass: Class = null;
		try {
			icontargetclass = getDefinitionByName("com.ami.Graphics." + iconclass) as Class;
		}
		catch (e: Error) {
		}
		if (icontargetclass) {
			retval = icontargetclass[iconname];
		}
		else {
			try {
				icontargetclass = getDefinitionByName(iconclass) as Class;
			}
			catch (e: Error) {
			}
			if (icontargetclass) {
				retval = icontargetclass[iconname];
			}
		} */
    return retval;
  }


  //______________________________________________________________________________
  //==============================================================================
  //             com.ami.projects.XMS/XMSUtils::getMemoryInUnits
  //------------------------------------------------------------------------------
  //  Taken from VXH, used to convert a byte value into the given unit string
  //
  // Input
  // -----
  //   size: Number - number to be converted to unit string
  //						  (default size assume to be in bytes)
  //
  //   unit: String - units of the passed size (string 'mb', 'bytes', 'kb')
  //
  // Output
  // ------
  //   String -	value string with unit
  //
  //______________________________________________________________________________
  //==============================================================================

  getSizeInUnits(size: number, unit: string = "bytes"): string {
    var memory: string = '';
    if (size != -1) {
      if (unit == "gb") {
        if (size >= 1024)	// in gigabytes
        {
          memory = Number((size / 1024) * 100) / 100 + " TB";
        }
        else	// in megabytes
        {
          memory = size + " GB";
        }
      }
      else if (unit == "mb") {
        if (size >= 1024)	// in gigabytes
        {
          memory = Number((size / 1024) * 100) / 100 + " GB";
        }
        else	// in megabytes
        {
          memory = size + " MB";
        }
      }
      else if (unit == "bytes") {
        if (size < 1024)	// in bytes
        {
          memory = Number(size * 100) / 100 + " bytes";
        }
        else if ((size >= 1024) && (size < 1048576))		// in kilobytes
        {
          memory = Number((size / 1024) * 100) / 100 + " KB";
        }
        else if ((size >= 1048576) && (size < 1073741824))	// in megabytes
        {
          memory = Number((size / 1048576) * 100) / 100 + " MB";
        }
        else	// in gigabytes
        {
          memory = Number((size / 1073741824) * 100) / 100 + " GB";
        }
      }
      else if (unit == "kb") {
        if (size <= 1024)	// in kilobytes
        {
          memory = Number(size * 100) / 100 + " KB";
        }
        else if ((size >= 1024) && (size < 1048576))		// in megabytes
        {
          memory = Number((size / 1024) * 100) / 100 + " MB";
        }
        else if ((size >= 1048576) && (size < 1073741824))	// in gigabytes
        {
          memory = Number((size / 1048576) * 100) / 100 + " GB";
        }
        else	// in Terabyte
        {
          memory = Number((size / 1073741824) * 100) / 100 + " TB";
        }
      }
    }
    return memory.toString();
  }


  getCommaSeparatedValuestoArray(items: string, sort: number): Array<any> {
    var vals: Array<any> = items.split(/\s*,\s*/);	// get words out of user's string and trim space
    // vals.sort(sort);
    return vals;
  }

  getArraytoCommaSeparatedString(items: Array<any>, propertyname: String = ""): string {
    // create the list of values
    var deststring: string = "";
    var len: number = items.length;
		/* for (var y: number = 0; y < len; y++) {
			deststring += propertyname == "" ? items[y] : items[y][propertyname];;
			deststring += (y < len - 1) ? "," : "";
		} */
    return deststring;
  }


  //______________________________________________________________________________
  //==============================================================================
  //                             tokenizestrings
  //------------------------------------------------------------------------------
  //
  //
  // Input
  // -----
  //   string: String - string containing token placeholders %1, %2 etc
  //
  //   descdata: String - a string of tokens, delimited by ;;
  //                     These are split into an array, and each matches %1, %2 etc
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  tokenizestrings(strin: string, descdata: string): string {
    var ar: Array<any> = [];
    var str: string = strin;
    ar = descdata.split(/\s*;;\s*/);
    str = XMSUtils.tokenReplace(strin, ar);
    var patt: RegExp = /(%[0-9]{1,2})/g;
    str = str.replace(patt, "(UNMATCHED TOKEN %1)");
    return str;
  }

  //______________________________________________________________________________
  //==============================================================================
  //         com.ami.projects.XMS/XMSUtils::tokenizestringswitharray
  //------------------------------------------------------------------------------
  // Input
  // -----
  //   string: String - string containing token placeholders %1, %2 etc
  //
  //   descdata: Array - an array of strings, replaced in order
  //
  // Output
  // ------
  //   String -
  //
  //______________________________________________________________________________
  //==============================================================================

  tokenizestringswitharray(strin: string, descdata: Array<any>): String {
    var str: String = strin;
    str = XMSUtils.tokenReplace(strin, descdata);
    var patt: RegExp = /(%[0-9]{1,2})/g;
    str = str.replace(patt, "(UNMATCHED TOKEN %1)");
    return str;
  }

}//EO_UTILS